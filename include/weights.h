#ifndef WEIGHTS_H
#include <stdint.h>

// serving_default_conv2d_input:0
const int8_t serving_default_conv2d_input_0[] = {

    48, -90, 35, -40, -68, 1, 0, 0, 112, -91, 
    35, -40, -68, 1, 0, 0, -16, -61, 36, -40, 
    -68, 1, 0, 0, -80, -86, 35, -40, -68, 1, 
    0, 0, 112, -90, 35, -40, -68, 1, 0, 0, 
    -16, -99, 35, -40, -68, 1, 0, 0, -80, 11, 
    37, -40, -68, 1, 0, 0, -16, -51, 36, -40, 
    -68, 1, 0, 0, 
};

// sequential/flatten/Const
const int8_t sequential_flatten_Const[] = {

    -1, 72, 
};

// sequential/dense/BiasAdd/ReadVariableOp
const int32_t sequential_dense_BiasAdd_ReadVariableOp[] = {

    113, 208, 40, 34, -297, -45, -50, -219, 174, -12, 
};

// sequential/dense/MatMul
const int8_t sequential_dense_MatMul[] = {

    18, -71, 21, -18, 22, -14, 2, -83, -27, 45, 
    32, 41, -30, 4, -12, 33, 11, -22, 4, -45, 
    15, -77, -10, -53, 2, -60, -7, -26, -7, -3, 
    33, -109, -79, 37, -38, -3, -31, 70, 13, 22, 
    -12, -41, -4, -33, -3, 3, -23, -28, 25, -30, 
    8, -12, -16, 14, 25, 23, -15, -43, -15, -63, 
    9, 54, -3, -10, 14, -10, 28, 35, 23, 5, 
    -10, 16, -28, 4, -6, -112, 31, -25, -100, -36, 
    34, -76, 6, -88, 7, 25, -3, -66, -17, 9, 
    19, 1, -30, 13, 5, -8, -28, -20, 11, 1, 
    8, 19, -7, 15, 27, -78, 44, 4, 5, -86, 
    22, -28, 13, 25, -24, -34, -51, 24, 3, -5, 
    -33, 15, 14, -25, 6, -8, -46, -37, 39, -93, 
    7, -18, 10, 18, -5, -25, 11, 29, -24, -72, 
    -8, 31, 8, -22, -13, 25, -2, 40, -19, -8, 
    2, 40, -8, -65, 11, 11, -15, 28, 4, 9, 
    -20, 9, -13, -21, 17, 25, 31, -11, -44, 13, 
    -51, -11, 6, -55, -1, 24, 9, -7, -44, -44, 
    1, 39, -28, -19, -42, -41, 3, 39, -44, 26, 
    -2, 47, -9, -59, 30, -15, 23, 4, -2, -15, 
    30, -53, 27, -18, 15, -32, 30, -3, -4, 16, 
    -27, -46, 68, 28, -1, -67, -20, 42, -6, 68, 
    -40, 16, 26, 18, -13, -12, -9, 21, -3, 40, 
    -25, -15, 5, -8, -17, 41, -35, -33, 28, 42, 
    -57, 23, -36, -13, -50, -9, -47, -6, 16, -3, 
    12, -21, -8, 76, -10, -17, 7, 37, -2, -48, 
    39, 28, -2, -40, -3, -19, -37, -23, 7, 0, 
    -28, -5, -16, 52, 9, -35, 14, -7, -36, -12, 
    9, -11, 20, 22, 26, -62, 10, -20, 12, -54, 
    -17, -122, 17, -34, -43, -102, -22, -69, -28, -21, 
    2, 48, 7, -23, -15, -11, -61, -54, 24, 54, 
    -34, -17, 34, -64, -1, -15, 24, 6, 40, -17, 
    14, -48, -5, -40, 35, -47, 8, -60, -3, -14, 
    20, 2, 27, -1, 18, 4, -4, 11, 2, 52, 
    -34, -43, 33, 33, 1, -34, 6, 30, -26, -33, 
    -32, -16, -33, 15, 16, 50, -73, 10, 35, 34, 
    43, -46, 4, -27, -9, 16, 12, -73, -15, 58, 
    -10, 24, -5, -97, 4, 27, -44, 28, 14, 67, 
    -43, 11, 8, 39, -1, -1, 27, 38, -30, -11, 
    29, 23, 2, 28, 13, 43, -54, -60, -29, 33, 
    -4, -2, -24, -53, 8, -12, -21, -74, -1, -3, 
    -35, 8, 26, -38, -10, -61, -21, -2, -14, 0, 
    -20, 20, -19, -18, -27, 6, -22, 31, -25, -14, 
    19, 28, -12, -70, 7, -77, 18, -22, -48, -84, 
    -18, 32, -13, -15, -37, -12, 18, 39, -47, 9, 
    -38, -19, -36, 24, -37, 1, 32, -97, 30, -43, 
    10, 20, 10, -127, 0, 19, 15, -21, -15, -39, 
    31, 34, 9, 15, -14, -56, 18, -9, -24, -75, 
    9, 10, 12, 2, -8, 12, 1, 28, 9, 37, 
    0, 1, 9, -56, 12, 7, 4, -29, 16, -21, 
    40, -58, -27, -54, -21, 33, 12, 31, -10, 13, 
    -13, 11, -17, 10, 13, 11, -35, -25, -16, 15, 
    4, 6, 41, -8, 9, -24, 23, 0, -22, -16, 
    -25, -24, 18, 33, -16, -9, 1, -36, -11, -27, 
    23, 45, -10, -14, 12, -39, 38, 26, 43, -17, 
    0, 24, -72, 7, -21, -18, 14, -1, -12, -16, 
    -7, 15, 12, 21, -52, -17, 3, 61, -61, -4, 
    -17, 34, -126, 42, 2, 41, 22, -28, -6, -28, 
    -18, 17, 5, 6, -28, 33, -24, -21, 35, -36, 
    17, -64, 9, 5, 17, -10, -5, -40, -16, 29, 
    -24, 24, 12, -59, 23, -23, -30, 8, -9, -25, 
    15, 20, 19, -69, 3, -78, -28, 25, -2, 35, 
    4, -8, 5, 30, -7, -34, -18, -24, 0, 32, 
    -7, 35, -29, -38, 10, 22, 17, -62, 29, -14, 
    7, 5, 26, -47, -3, -74, 3, -17, 15, -15, 
    3, -25, -19, 12, 20, -18, -18, -20, -24, -36, 
    11, 7, 5, -53, 49, -4, -1, -53, 5, -40, 
    3, -31, -11, 39, 23, 39, -38, -16, -10, 42, 
    -3, 1, 8, 18, 11, 5, -14, 51, 24, -32, 
    12, 56, -40, -126, 13, 9, -19, 16, -37, 2, 
    3, 17, -39, -11, -19, 32, -57, -14, 9, 16, 
    -47, 7, -24, -22, -16, 11, -4, 7, 1, -14, 
};

// sequential/conv2d/BiasAdd/ReadVariableOp
const int32_t sequential_conv2d_BiasAdd_ReadVariableOp[] = {

    -1482, 17051, -1396, 7127, 1298, 19318, -1435, 16603
};

// sequential/conv2d/Conv2D
const int8_t sequential_conv2d_Conv2D[] = {

    24, 85, 22, 30, 127, 31, 39, 121, 56, 21, 
    30, 109, -46, -127, -77, 94, -41, -42, 3, 125, 
    64, 35, 103, 127, 18, -24, 29, 64, 127, 104, 
    79, 16, -11, -76, -119, -82, 2, -57, 41, 8, 
    -16, 73, 40, 127, 84, -42, -127, 53, -76, 41, 
    48, -15, -24, 6, 57, 119, 14, 127, 11, -27, 
    67, -2, 18, 90, 21, 77, 22, -57, 20, -95, 
    -121, -127
};

// sequential/conv2d/Relu;sequential/conv2d/BiasAdd;sequential/conv2d/Conv2D;sequential/conv2d/BiasAdd/ReadVariableOp
const int8_t sequential_conv2d_Relu_sequential_conv2d_BiasAdd_sequential_conv2d_Conv2D_sequential_conv2d_BiasAdd_ReadVariableOp[] = {

    112, -76, 35, -40, -68, 1, 0, 0, -80, -76, 
    35, -40, -68, 1, 0, 0, 48, -109, 35, -40, 
    -68, 1, 0, 0, 48, -54, -42, -41, -68, 1, 
    0, 0, -16, -97, 35, -40, -68, 1, 0, 0, 
    48, -96, 35, -40, -68, 1, 0, 0, -16, 47, 
    -21, -41, -68, 1, 0, 0, -80, 26, 37, -40, 
    -68, 1, 0, 0, -80, -109, 35, -40, -68, 1, 
    0, 0, -80, -98, 35, -40, -68, 1, 0, 0, 
    -96, -41, 36, -40, -68, 1, 0, 0, -112, -60, 
    36, -40, -68, 1, 0, 0, -32, -45, 36, -40, 
    -68, 1, 0, 0, 48, -68, 35, -40, -68, 1, 
    0, 0, 112, -68, 35, -40, -68, 1, 0, 0, 
    48, 6, 37, -40, -68, 1, 0, 0, -16, -74, 
    35, -40, -68, 1, 0, 0, 112, -112, -39, -41, 
    -68, 1, 0, 0, -16, -106, 35, -40, -68, 1, 
    0, 0, -16, 21, 37, -40, -68, 1, 0, 0, 
    48, -105, 35, -40, -68, 1, 0, 0, 112, 6, 
    37, -40, -68, 1, 0, 0, 112, -96, 35, -40, 
    -68, 1, 0, 0, 112, 28, -26, -5, -68, 1, 
    0, 0, 112, -105, 35, -40, -68, 1, 0, 0, 
    -64, -53, 36, -40, -68, 1, 0, 0, 48, -70, 
    35, -40, -68, 1, 0, 0, 48, -85, 35, -40, 
    -68, 1, 0, 0, 112, 3, 37, -40, -68, 1, 
    0, 0, -80, 3, 37, -40, -68, 1, 0, 0, 
    -80, 12, 37, -40, -68, 1, 0, 0, 48, -76, 
    35, -40, -68, 1, 0, 0, -80, 6, 37, -40, 
    -68, 1, 0, 0, 112, 55, -37, -41, -68, 1, 
    0, 0, -16, 13, 37, -40, -68, 1, 0, 0, 
    -96, -61, 36, -40, -68, 1, 0, 0, 
};

// sequential/max_pooling2d/MaxPool
const int8_t sequential_max_pooling2d_MaxPool[] = {

    64, -60, 36, -40, -68, 1, 0, 0, 48, -88, 
    35, -40, -68, 1, 0, 0, 48, -59, 36, -40, 
    -68, 1, 0, 0, -80, -90, 35, -40, -68, 1, 
    0, 0, -16, 12, 37, -40, -68, 1, 0, 0, 
    48, 13, 37, -40, -68, 1, 0, 0, 112, -88, 
    35, -40, -68, 1, 0, 0, -80, -88, 35, -40, 
    -68, 1, 0, 0, -80, -87, 35, -40, -68, 1, 
    0, 0, 
};

// sequential/flatten/Reshape
const int8_t sequential_flatten_Reshape[] = {

    -80, 79, -46, -41, -68, 1, 0, 0, 112, 5, 
    37, -40, -68, 1, 0, 0, 48, 1, 37, -40, 
    -68, 1, 0, 0, -16, 29, 37, -40, -68, 1, 
    0, 0, 48, 30, 37, -40, -68, 1, 0, 0, 
    112, 12, 37, -40, -68, 1, 0, 0, 112, -97, 
    35, -40, -68, 1, 0, 0, 112, 1, 37, -40, 
    -68, 1, 0, 0, -16, -70, 35, -40, -68, 1, 
    0, 0, 
};

// StatefulPartitionedCall:0
const int8_t StatefulPartitionedCall_0[] = {

    64, -60, 36, -40, -68, 1, 0, 0, 48, -88, 
};

// 
const int8_t DUMMY[] = {

    64, -60, 36, -40, -68, 1, 0, 0, 48, -88, 
    35, -40, -68, 1, 0, 0, 48, -59, 36, -40, 
    -68, 1, 0, 0, -80, -90, 35, -40, -68, 1, 
    0, 0, -16, 12, 37, -40, -68, 1, 0, 0, 
    48, 13, 37, -40, -68, 1, 0, 0, 112, -88, 
    35, -40, -68, 1, 0, 0, -80, -88, 35, -40, 
    -68, 1, 0, 0, -80, -87, 35, -40, -68, 1, 
    0, 0, 64, -50, 36, -40, -68, 1, 0, 0, 
    112, 13, 37, -40, -68, 1, 0, 0, -64, -38, 
    36, -40, -68, 1, 0, 0, 48, -49, 36, -40, 
    -68, 1, 0, 0, 48, 126, -42, -41, -68, 1, 
    0, 0, 48, 5, 37, -40, -68, 1, 0, 0, 
    -80, -70, 35, -40, -68, 1, 0, 0, -80, 79, 
    -46, -41, -68, 1, 0, 0, 112, 5, 37, -40, 
    -68, 1, 0, 0, 48, 1, 37, -40, -68, 1, 
    0, 0, -16, 29, 37, -40, -68, 1, 0, 0, 
    48, 30, 37, -40, -68, 1, 0, 0, 112, 12, 
    37, -40, -68, 1, 0, 0, 112, -97, 35, -40, 
    -68, 1, 0, 0, 112, 1, 37, -40, -68, 1, 
    0, 0, -16, -70, 35, -40, -68, 1, 0, 0, 
    48, -69, 35, -40, -68, 1, 0, 0, -80, 25, 
    37, -40, -68, 1, 0, 0, -16, 25, 37, -40, 
    -68, 1, 0, 0, 48, 26, 37, -40, -68, 1, 
    0, 0, 112, 26, 37, -40, -68, 1, 0, 0, 
    112, -69, 35, -40, -68, 1, 0, 0, -80, -69, 
    35, -40, -68, 1, 0, 0, -16, -69, 35, -40, 
    -68, 1, 0, 0, 112, -109, 35, -40, -68, 1, 
    0, 0, 48, -110, 35, -40, -68, 1, 0, 0, 
    112, -110, 35, -40, -68, 1, 0, 0, -16, 22, 
    37, -40, -68, 1, 0, 0, -80, -97, 35, -40, 
    -68, 1, 0, 0, 48, -72, 35, -40, -68, 1, 
    0, 0, -80, -110, 35, -40, -68, 1, 0, 0, 
    -16, -56, -42, -41, 
};

#endif // WEIGHTS_H
